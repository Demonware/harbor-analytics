// Copyright (C) Activision Publishing, Inc. 2017
// https://github.com/Demonware/harbor-analytics
// Author: David Rieger
// Licensed under the 3-Clause BSD License (the "License");
// you may not use this file except in compliance with the License.

package outputgen

import (
	"fmt"
	"log"
	"os"
	"strings"

	chart "github.com/wcharczuk/go-chart"
)

const (
	maxLabelLength = 25
)

/*BarChartable must be implemented by any type that
will be used as the chartdata input
of a BarChart generator.*/
type BarChartable interface {
	GetOrderedBarChartValues() BarChartableValuesOrdered
	SetTitle(string)
	// Should raise an error if title is empty
	Title() string
}

/*BarChartableValuesOrdered is a slice of structs that will be
generated by a GetBarChartValues() method implementation
of any struct that implements BarChartable.
The bars will be rendered on the order of appearance in this slice.*/
type BarChartableValuesOrdered []BarChartableValue

/*BarChartableValue Is a value containing a label and value which can
be transformed into a printable bar of a bar chart.*/
type BarChartableValue struct {
	Value int
	Label string
}

func toPrintableChartValues(barChartable BarChartable) []chart.Value {

	var chartvalues []chart.Value

	for _, barChartValue := range barChartable.GetOrderedBarChartValues() {
		chartvalues = append(chartvalues, chart.Value{
			Value: float64(barChartValue.Value),
			Label: strings.Replace(barChartValue.Label, "/", "/ ", -1),
		},
		)
	}

	return chartvalues

}

/*BuildBarChart creates a bar chart from the given chartdata,
exports it to PNG, saves it to the outDir (according to the given
chart name) and returns the path to the png.*/
func BuildBarChart(chartable BarChartable) (string, error) {

	graph := chart.BarChart{
		Title:      chartable.Title(),
		TitleStyle: chart.StyleShow(),
		Bars:       toPrintableChartValues(chartable),
		XAxis: chart.Style{
			Show:                true,
			FontSize:            10,
			TextRotationDegrees: 0,
			TextWrap:            chart.TextWrapWord,
		},
		YAxis: chart.YAxis{
			Style: chart.Style{
				Show: true,
			},
			// Format y axis values to int
			ValueFormatter: func(v interface{}) string {
				if typed, isTyped := v.(float64); isTyped {
					return fmt.Sprintf("%d", int(typed))
				}
				return ""
			},
		},
	}

	outFilePath := fmt.Sprintf("%s/%s.png", OutDir, strings.Replace(strings.ToLower(chartable.Title()), " ", "_", -1))

	outFile, err := os.Create(outFilePath)
	if err != nil {
		log.Fatal(err)
		return "", err
	}

	defer outFile.Close()

	err = graph.Render(chart.PNG, outFile)
	if err != nil {
		log.Fatal(err.Error())
		return "", err
	}

	return outFilePath, nil

}
